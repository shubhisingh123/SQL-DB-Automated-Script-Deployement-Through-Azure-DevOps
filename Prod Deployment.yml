# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  name: AzureBI-Agent

parameters:
- name: Project_Name
  displayName: Project Name
  type: string
  values:
  - BI
  - CX
  - WAM
  - Self_Service
  - TRC
 
variables:
- group: SQL Credentials
- group: Database Name
- group: Server Name

stages:
- stage: PRODDeployment
  jobs:
  - deployment: publish
    pool:
     name: AzureBI-Agent
     demands:
     - Agent.Name -equals AZURE-DEVOPS-09
    displayName: Deploy Script to Prod
    environment: PROD
  - job: My_Job1
    pool:
     name: AzureBI-Agent
     demands:
     - Agent.Name -equals AZURE-DEVOPS-09
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            echo $(Build.ArtifactStagingDirectory)
            Get-ChildItem $(Build.ArtifactStagingDirectory)
            git clone -b main --single-branch -q "https://$(SQL_PAT)@dev.azure.com/NewJerseyResources/SQL%20Database%20Deployment/_git/SQL%20Database%20Deployment"
            ls
              
      - task: PythonScript@0
        displayName: Get the Scripts that needs to be deployed
        inputs:
          scriptSource: 'inline'
          script: |
            import csv
            import sys
            from pandas import *
            import os
            import shutil

            data1 = read_csv("C:\\Agent\\_work\\7\\s\\SQL%20Database%20Deployment\\Projects\\" + sys.argv[1] + "\\" + sys.argv[1] + "_UAT_Script_Tracking.csv")
            UAT_Script = data1[sys.argv[1]].tolist()
            data2 = read_csv("C:\\Agent\\_work\\7\\s\\SQL%20Database%20Deployment\\Projects\\" + sys.argv[1] + "\\" + sys.argv[1] + "_PROD_Script_Tracking.csv")
            PROD_Script = data2[sys.argv[1]].tolist()
            Final_Script = list(set(UAT_Script) - set(PROD_Script))  
            Final_Script.sort()
            print(Final_Script)

            for scripts in Final_Script:
              shutil.copy("C:\\Agent\\_work\\7\\s\\SQL%20Database%20Deployment\\Projects\\"+ sys.argv[1] + "\\" + scripts, "C:\\Agent\\_work\\7\\a\\"+scripts)
              PROD_Script.append(scripts)
             
            
            print(PROD_Script)
            Details = [sys.argv[1]]
            r = zip(PROD_Script)
            with open("C:\\Agent\\_work\\7\\s\\SQL%20Database%20Deployment\\Projects\\" + sys.argv[1] + "\\" + sys.argv[1] + "_PROD_Script_Tracking.csv", "w", newline='' ) as s:
                w = csv.writer(s)
                w.writerow(Details)
                for row in r:
                    w.writerow(row)
            
          arguments: '${{ parameters.Project_Name }}'


      - task: PublishBuildArtifacts@1
        displayName: "Pulish Scripts"
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'Drop'
          publishLocation: 'Container'
          

      # - task: PowerShell@2
      #   displayName: Deploy Script in PROD
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       $File_Count = ( Get-ChildItem $(Build.ArtifactStagingDirectory) | Measure-Object ).Count
      #       echo $File_Count
      #       if($File_Count -ge 1)
      #       {
      #       cd "$(Build.ArtifactStagingDirectory)"
      #       $contents = Get-ChildItem -Name
      #       $type= $contents.GetType()
            
      #       if($type.Name -eq "String"){
      #         $content = ,$contents
      #       }
      #       else{$content = $contents }
            
      #       $len=$content.length
            
      #       Import-Module SQLServer
      #       for($i=0; $i -le $len-1; $i++){
      #       $report_SQL_File_Name = $content[$i]
      #       $Non_Final_Path = "$(Build.ArtifactStagingDirectory)"
      #       $Final_Path = "$Non_Final_Path/$report_SQL_File_Name"
            
      #       $clientid = "$(CLIENT_ID)"
      #       $tenantid = "$(TENANT_ID)"
      #       $secret = "$(CLIENT_SECRET)"
            
      #       $request = Invoke-RestMethod -Method POST `
      #                 -Uri "https://login.microsoftonline.com/$tenantid/oauth2/token"`
      #                 -Body @{ resource="https://database.windows.net/"; grant_type="client_credentials"; client_id=$clientid; client_secret=$secret }`
      #                 -ContentType "application/x-www-form-urlencoded"
      #       $access_token = $request.access_token
      #       echo "$report_SQL_File_Name"
      #       Invoke-Sqlcmd -ServerInstance $(PROD_Server_Name) -Database $(PROD_Database_Name) -AccessToken $access_token -InputFile "$Final_Path"

      #       }
      #       }


      - task: PowerShell@2
        displayName: Commit the files in main branch
        inputs:
          targetType: 'inline'
          script: |
            git --version
            $File_Count = ( Get-ChildItem $(Build.ArtifactStagingDirectory) | Measure-Object ).Count
            echo $File_Count
            if($File_Count -ge 1)
            {
            cd $(System.DefaultWorkingDirectory)/SQL%20Database%20Deployment
            git config --global user.email "ServiceHADdev@njresources.com"
            git config --global user.name "Service Hanu-AzureDevops"
            $Time = Get-Date
            $Message = "$Time"
            git add .
            git commit -m "$Message"
            git pull
            git push https://$(SQL_PAT)@dev.azure.com/NewJerseyResources/SQL%20Database%20Deployment/_git/SQL%20Database%20Deployment
            }